package com.cloud.controller;

import com.cloud.service.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import com.cloud.domain.*;

import java.sql.Timestamp;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@RestController
public class CustomerController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;


    @Autowired
    private UserService userService;

    @Autowired
    private SecurityServiceImpl securityService;

    @PostMapping(path="/v1/user",produces = "application/json") // Map ONLY POST Requests
    @ResponseStatus(value = HttpStatus.CREATED)
    public ResponseEntity createUser (@RequestBody userInfo info ) {
        if(info.getPassword()==null||info.getEmail_address()==null||info.getFirst_name()==null||info.getLast_name()==null){
            //System.out.println("1");
            return new ResponseEntity<>(HttpStatus.valueOf(400));
        }
        if(info.getLast_name().equals("")||info.getFirst_name().equals("")){
            //System.out.println("2");
            return new ResponseEntity<>(HttpStatus.valueOf(400));
        }

        if(!userService.pwdValidation(info.getPassword())){
           // System.out.println("3");
            return new ResponseEntity<>(HttpStatus.valueOf(400));
        }
        if(!userService.emailVaildation(info.getEmail_address())){
           // System.out.println("4");
            return new ResponseEntity<>(HttpStatus.valueOf(400));
        }
        UserAccount n= new UserAccount();
        n.setFirst_name(info.getFirst_name());
        n.setLast_name(info.getLast_name());
        n.setPassword(info.getPassword());
        n.setEmailAddress(info.getEmail_address());
        n.setAccount_updated(new Timestamp(System.currentTimeMillis()).toString());
        n.setAccount_created(new Timestamp(System.currentTimeMillis()).toString());
        if(userService.CheckIfEmailExists(n.getEmailAddress())){
            return new ResponseEntity<>(HttpStatus.valueOf(400));
        }

        userService.saveWithEncoder(n);
        return new ResponseEntity<>(new userInfo_noPwd(n.getId(),n.getFirst_name(),n.getLast_name(),n.getEmailAddress(),n.getAccount_created(),n.getAccount_updated()),HttpStatus.CREATED);
    }


    //Get User Info
    @GetMapping(path="/v1/user/self",produces = "application/json")
    public ResponseEntity getUserInfo (){
      Authentication authentication =
                SecurityContextHolder.getContext().getAuthentication();
            System.out.println(authentication.getName());
            UserAccount n=userService.findByEmail(authentication.getName());

            return new ResponseEntity(new userInfo_noPwd(n.getId(),n.getFirst_name(),n.getLast_name(),n.getEmailAddress(),n.getAccount_created(),n.getAccount_updated()),HttpStatus.OK);



    }

    //Update user info
    @PutMapping(path="/v1/user/self",produces = "application/json")
    public ResponseEntity updateUserInfo (@RequestBody UserAccount_v2 n){
        Authentication authentication =
                SecurityContextHolder.getContext().getAuthentication();
        System.out.println(authentication.getName());
        UserAccount old=userService.findByEmail(authentication.getName());

        if(n.getId()!=null||n.getAccount_created()!=null||n.getAccount_updated()!=null||!old.getEmailAddress().equals(n.getEmail_address())){
            return new ResponseEntity(HttpStatus.valueOf(400));
        }

        int i=0;
        if(n.getFirst_name()!=null && !"".equals(n.getFirst_name())){
            old.setFirst_name(n.getFirst_name());
            i++;
        }
        if(n.getLast_name()!=null && !"".equals(n.getLast_name())){
            old.setLast_name(n.getLast_name());
            i++;
        }
        if(n.getPassword()!=null && !"".equals(n.getPassword())){
            if(!userService.pwdValidation(n.getPassword())){
                return new ResponseEntity(HttpStatus.valueOf(400));
            }
            //System.out.println("password changed");
            old.setPassword(n.getPassword());
            i++;
        }




        old.setAccount_updated(new Timestamp(System.currentTimeMillis()).toString());
        userService.update(old);
        return new ResponseEntity(HttpStatus.valueOf(204));
    }

    /*
    @GetMapping(path="/all")
    @ResponseBody
    public  Iterable<UserAccount> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
    */





}
